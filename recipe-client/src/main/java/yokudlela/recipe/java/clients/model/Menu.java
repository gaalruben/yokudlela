/*
 * Yokudlela Recipes/Menus API
 * description = \"Yokudlela Recipes/Tables API for Graphical User Interface .
 *
 * The version of the OpenAPI document: v1
 * Contact: gaalruben02@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package yokudlela.recipe.java.clients.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import yokudlela.recipe.java.clients.model.MenuGroup;
import yokudlela.recipe.java.clients.model.MenuItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import yokudlela.recipe.java.clients.invoker.JSON;

/**
 * Men�
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-27T01:43:22.861654500+02:00[Europe/Budapest]")
public class Menu {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private MenuGroup group;

  /**
   * A h�t mely napj�n el�rhet?
   */
  @JsonAdapter(DayAvailableEnum.Adapter.class)
  public enum DayAvailableEnum {
    MONDAY("MONDAY"),
    
    TUESDAY("TUESDAY"),
    
    WEDNESDAY("WEDNESDAY"),
    
    THURSDAY("THURSDAY"),
    
    FRIDAY("FRIDAY"),
    
    SATURDAY("SATURDAY"),
    
    SUNDAY("SUNDAY");

    private String value;

    DayAvailableEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DayAvailableEnum fromValue(String value) {
      for (DayAvailableEnum b : DayAvailableEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DayAvailableEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DayAvailableEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DayAvailableEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DayAvailableEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DAY_AVAILABLE = "dayAvailable";
  @SerializedName(SERIALIZED_NAME_DAY_AVAILABLE)
  private DayAvailableEnum dayAvailable;

  public static final String SERIALIZED_NAME_MENU_ITEMS = "menuItems";
  @SerializedName(SERIALIZED_NAME_MENU_ITEMS)
  private List<MenuItem> menuItems = null;

  public Menu() {
  }

  public Menu id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public Menu name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Menu group(MenuGroup group) {
    
    this.group = group;
    return this;
  }

   /**
   * Get group
   * @return group
  **/
  @javax.annotation.Nullable

  public MenuGroup getGroup() {
    return group;
  }


  public void setGroup(MenuGroup group) {
    this.group = group;
  }


  public Menu dayAvailable(DayAvailableEnum dayAvailable) {
    
    this.dayAvailable = dayAvailable;
    return this;
  }

   /**
   * A h�t mely napj�n el�rhet?
   * @return dayAvailable
  **/
  @javax.annotation.Nullable

  public DayAvailableEnum getDayAvailable() {
    return dayAvailable;
  }


  public void setDayAvailable(DayAvailableEnum dayAvailable) {
    this.dayAvailable = dayAvailable;
  }


  public Menu menuItems(List<MenuItem> menuItems) {
    
    this.menuItems = menuItems;
    return this;
  }

  public Menu addMenuItemsItem(MenuItem menuItemsItem) {
    if (this.menuItems == null) {
      this.menuItems = new ArrayList<>();
    }
    this.menuItems.add(menuItemsItem);
    return this;
  }

   /**
   * �telek
   * @return menuItems
  **/
  @javax.annotation.Nullable

  public List<MenuItem> getMenuItems() {
    return menuItems;
  }


  public void setMenuItems(List<MenuItem> menuItems) {
    this.menuItems = menuItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Menu menu = (Menu) o;
    return Objects.equals(this.id, menu.id) &&
        Objects.equals(this.name, menu.name) &&
        Objects.equals(this.group, menu.group) &&
        Objects.equals(this.dayAvailable, menu.dayAvailable) &&
        Objects.equals(this.menuItems, menu.menuItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, group, dayAvailable, menuItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Menu {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    dayAvailable: ").append(toIndentedString(dayAvailable)).append("\n");
    sb.append("    menuItems: ").append(toIndentedString(menuItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("group");
    openapiFields.add("dayAvailable");
    openapiFields.add("menuItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Menu
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Menu.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Menu is not found in the empty JSON string", Menu.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Menu.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Menu` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `group`
      if (jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) {
        MenuGroup.validateJsonObject(jsonObj.getAsJsonObject("group"));
      }
      if ((jsonObj.get("dayAvailable") != null && !jsonObj.get("dayAvailable").isJsonNull()) && !jsonObj.get("dayAvailable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dayAvailable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dayAvailable").toString()));
      }
      if (jsonObj.get("menuItems") != null && !jsonObj.get("menuItems").isJsonNull()) {
        JsonArray jsonArraymenuItems = jsonObj.getAsJsonArray("menuItems");
        if (jsonArraymenuItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("menuItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `menuItems` to be an array in the JSON string but got `%s`", jsonObj.get("menuItems").toString()));
          }

          // validate the optional field `menuItems` (array)
          for (int i = 0; i < jsonArraymenuItems.size(); i++) {
            MenuItem.validateJsonObject(jsonArraymenuItems.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Menu.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Menu' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Menu> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Menu.class));

       return (TypeAdapter<T>) new TypeAdapter<Menu>() {
           @Override
           public void write(JsonWriter out, Menu value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Menu read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Menu given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Menu
  * @throws IOException if the JSON string is invalid with respect to Menu
  */
  public static Menu fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Menu.class);
  }

 /**
  * Convert an instance of Menu to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

