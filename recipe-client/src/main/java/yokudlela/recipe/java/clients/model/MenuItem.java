/*
 * Yokudlela Recipes/Menus API
 * description = \"Yokudlela Recipes/Tables API for Graphical User Interface .
 *
 * The version of the OpenAPI document: v1
 * Contact: gaalruben02@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package yokudlela.recipe.java.clients.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import yokudlela.recipe.java.clients.model.Menu;
import yokudlela.recipe.java.clients.model.Recipe;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import yokudlela.recipe.java.clients.invoker.JSON;

/**
 * �telek
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-27T01:43:22.861654500+02:00[Europe/Budapest]")
public class MenuItem {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TIMES_ORDERED = "timesOrdered";
  @SerializedName(SERIALIZED_NAME_TIMES_ORDERED)
  private Integer timesOrdered;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Integer price;

  public static final String SERIALIZED_NAME_RECIPE = "recipe";
  @SerializedName(SERIALIZED_NAME_RECIPE)
  private Recipe recipe;

  public static final String SERIALIZED_NAME_MENU = "menu";
  @SerializedName(SERIALIZED_NAME_MENU)
  private Menu menu;

  public MenuItem() {
  }

  public MenuItem id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public MenuItem name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * �tel neve
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public MenuItem timesOrdered(Integer timesOrdered) {
    
    this.timesOrdered = timesOrdered;
    return this;
  }

   /**
   * H�nyszor rendelt�k az �telt
   * @return timesOrdered
  **/
  @javax.annotation.Nullable

  public Integer getTimesOrdered() {
    return timesOrdered;
  }


  public void setTimesOrdered(Integer timesOrdered) {
    this.timesOrdered = timesOrdered;
  }


  public MenuItem price(Integer price) {
    
    this.price = price;
    return this;
  }

   /**
   * �r
   * @return price
  **/
  @javax.annotation.Nullable

  public Integer getPrice() {
    return price;
  }


  public void setPrice(Integer price) {
    this.price = price;
  }


  public MenuItem recipe(Recipe recipe) {
    
    this.recipe = recipe;
    return this;
  }

   /**
   * Get recipe
   * @return recipe
  **/
  @javax.annotation.Nullable

  public Recipe getRecipe() {
    return recipe;
  }


  public void setRecipe(Recipe recipe) {
    this.recipe = recipe;
  }


  public MenuItem menu(Menu menu) {
    
    this.menu = menu;
    return this;
  }

   /**
   * Get menu
   * @return menu
  **/
  @javax.annotation.Nullable

  public Menu getMenu() {
    return menu;
  }


  public void setMenu(Menu menu) {
    this.menu = menu;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MenuItem menuItem = (MenuItem) o;
    return Objects.equals(this.id, menuItem.id) &&
        Objects.equals(this.name, menuItem.name) &&
        Objects.equals(this.timesOrdered, menuItem.timesOrdered) &&
        Objects.equals(this.price, menuItem.price) &&
        Objects.equals(this.recipe, menuItem.recipe) &&
        Objects.equals(this.menu, menuItem.menu);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, timesOrdered, price, recipe, menu);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MenuItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    timesOrdered: ").append(toIndentedString(timesOrdered)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    recipe: ").append(toIndentedString(recipe)).append("\n");
    sb.append("    menu: ").append(toIndentedString(menu)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("timesOrdered");
    openapiFields.add("price");
    openapiFields.add("recipe");
    openapiFields.add("menu");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MenuItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MenuItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MenuItem is not found in the empty JSON string", MenuItem.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MenuItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MenuItem` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `recipe`
      if (jsonObj.get("recipe") != null && !jsonObj.get("recipe").isJsonNull()) {
        Recipe.validateJsonObject(jsonObj.getAsJsonObject("recipe"));
      }
      // validate the optional field `menu`
      if (jsonObj.get("menu") != null && !jsonObj.get("menu").isJsonNull()) {
        Menu.validateJsonObject(jsonObj.getAsJsonObject("menu"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MenuItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MenuItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MenuItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MenuItem.class));

       return (TypeAdapter<T>) new TypeAdapter<MenuItem>() {
           @Override
           public void write(JsonWriter out, MenuItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MenuItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MenuItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MenuItem
  * @throws IOException if the JSON string is invalid with respect to MenuItem
  */
  public static MenuItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MenuItem.class);
  }

 /**
  * Convert an instance of MenuItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

