/*
 * Yokudlela Recipes/Menus API
 * description = \"Yokudlela Recipes/Tables API for Graphical User Interface .
 *
 * The version of the OpenAPI document: v1
 * Contact: gaalruben02@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package yokudlela.recipe.java.clients.api;

import yokudlela.recipe.java.clients.invoker.ApiCallback;
import yokudlela.recipe.java.clients.invoker.ApiClient;
import yokudlela.recipe.java.clients.invoker.ApiException;
import yokudlela.recipe.java.clients.invoker.ApiResponse;
import yokudlela.recipe.java.clients.invoker.Configuration;
import yokudlela.recipe.java.clients.invoker.Pair;
import yokudlela.recipe.java.clients.invoker.ProgressRequestBody;
import yokudlela.recipe.java.clients.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import yokudlela.recipe.java.clients.model.Menu;
import yokudlela.recipe.java.clients.model.Product;
import yokudlela.recipe.java.clients.model.Recipe;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MenuControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MenuControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MenuControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addConsumer
     * @param name Term�k neve (required)
     * @param quantity Mennyis�g (required)
     * @param unit M�rt�kegys�g (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres felvitel </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addConsumerCall(String name, Double quantity, String unit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/menu/add/product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (quantity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quantity", quantity));
        }

        if (unit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unit", unit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addConsumerValidateBeforeCall(String name, Double quantity, String unit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling addConsumer(Async)");
        }

        // verify the required parameter 'quantity' is set
        if (quantity == null) {
            throw new ApiException("Missing the required parameter 'quantity' when calling addConsumer(Async)");
        }

        // verify the required parameter 'unit' is set
        if (unit == null) {
            throw new ApiException("Missing the required parameter 'unit' when calling addConsumer(Async)");
        }

        return addConsumerCall(name, quantity, unit, _callback);

    }

    /**
     * �j term�k felvitele
     * 
     * @param name Term�k neve (required)
     * @param quantity Mennyis�g (required)
     * @param unit M�rt�kegys�g (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres felvitel </td><td>  -  </td></tr>
     </table>
     */
    public Product addConsumer(String name, Double quantity, String unit) throws ApiException {
        ApiResponse<Product> localVarResp = addConsumerWithHttpInfo(name, quantity, unit);
        return localVarResp.getData();
    }

    /**
     * �j term�k felvitele
     * 
     * @param name Term�k neve (required)
     * @param quantity Mennyis�g (required)
     * @param unit M�rt�kegys�g (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres felvitel </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> addConsumerWithHttpInfo(String name, Double quantity, String unit) throws ApiException {
        okhttp3.Call localVarCall = addConsumerValidateBeforeCall(name, quantity, unit, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * �j term�k felvitele (asynchronously)
     * 
     * @param name Term�k neve (required)
     * @param quantity Mennyis�g (required)
     * @param unit M�rt�kegys�g (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres felvitel </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addConsumerAsync(String name, Double quantity, String unit, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = addConsumerValidateBeforeCall(name, quantity, unit, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLowQuantityProducts
     * @param quantity Maxim�lis mennyis�g (required)
     * @param unit M�rt�kegys�g (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLowQuantityProductsCall(Double quantity, String unit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/menu/getLowQuantityProducts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (quantity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quantity", quantity));
        }

        if (unit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unit", unit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLowQuantityProductsValidateBeforeCall(Double quantity, String unit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quantity' is set
        if (quantity == null) {
            throw new ApiException("Missing the required parameter 'quantity' when calling getLowQuantityProducts(Async)");
        }

        // verify the required parameter 'unit' is set
        if (unit == null) {
            throw new ApiException("Missing the required parameter 'unit' when calling getLowQuantityProducts(Async)");
        }

        return getLowQuantityProductsCall(quantity, unit, _callback);

    }

    /**
     * Azon term�kek lek�rdez�se, amelyek a megadott m�rt�kegys�get (G, KG, PCS, L, ML) haszn�lj�k �s a param�terk�nt �tadott mennyis�gn�l (pl. 100) kevesebb van bel?l�k rakt�ron.
     * 
     * @param quantity Maxim�lis mennyis�g (required)
     * @param unit M�rt�kegys�g (required)
     * @return List&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public List<Product> getLowQuantityProducts(Double quantity, String unit) throws ApiException {
        ApiResponse<List<Product>> localVarResp = getLowQuantityProductsWithHttpInfo(quantity, unit);
        return localVarResp.getData();
    }

    /**
     * Azon term�kek lek�rdez�se, amelyek a megadott m�rt�kegys�get (G, KG, PCS, L, ML) haszn�lj�k �s a param�terk�nt �tadott mennyis�gn�l (pl. 100) kevesebb van bel?l�k rakt�ron.
     * 
     * @param quantity Maxim�lis mennyis�g (required)
     * @param unit M�rt�kegys�g (required)
     * @return ApiResponse&lt;List&lt;Product&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Product>> getLowQuantityProductsWithHttpInfo(Double quantity, String unit) throws ApiException {
        okhttp3.Call localVarCall = getLowQuantityProductsValidateBeforeCall(quantity, unit, null);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Azon term�kek lek�rdez�se, amelyek a megadott m�rt�kegys�get (G, KG, PCS, L, ML) haszn�lj�k �s a param�terk�nt �tadott mennyis�gn�l (pl. 100) kevesebb van bel?l�k rakt�ron. (asynchronously)
     * 
     * @param quantity Maxim�lis mennyis�g (required)
     * @param unit M�rt�kegys�g (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLowQuantityProductsAsync(Double quantity, String unit, final ApiCallback<List<Product>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLowQuantityProductsValidateBeforeCall(quantity, unit, _callback);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMenusByDayOfWeek
     * @param dayOfWeek A h�t egy napja angolul (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMenusByDayOfWeekCall(String dayOfWeek, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/menu/getMenusByDayOfWeek";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dayOfWeek != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dayOfWeek", dayOfWeek));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMenusByDayOfWeekValidateBeforeCall(String dayOfWeek, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dayOfWeek' is set
        if (dayOfWeek == null) {
            throw new ApiException("Missing the required parameter 'dayOfWeek' when calling getMenusByDayOfWeek(Async)");
        }

        return getMenusByDayOfWeekCall(dayOfWeek, _callback);

    }

    /**
     * Azon men�k lek�rdez�se, amelyek a param�terk�nt �tadott napon (a h�t napjai k�z�l) el�rhet?ek. pl. MONDAY
     * 
     * @param dayOfWeek A h�t egy napja angolul (required)
     * @return List&lt;Menu&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public List<Menu> getMenusByDayOfWeek(String dayOfWeek) throws ApiException {
        ApiResponse<List<Menu>> localVarResp = getMenusByDayOfWeekWithHttpInfo(dayOfWeek);
        return localVarResp.getData();
    }

    /**
     * Azon men�k lek�rdez�se, amelyek a param�terk�nt �tadott napon (a h�t napjai k�z�l) el�rhet?ek. pl. MONDAY
     * 
     * @param dayOfWeek A h�t egy napja angolul (required)
     * @return ApiResponse&lt;List&lt;Menu&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Menu>> getMenusByDayOfWeekWithHttpInfo(String dayOfWeek) throws ApiException {
        okhttp3.Call localVarCall = getMenusByDayOfWeekValidateBeforeCall(dayOfWeek, null);
        Type localVarReturnType = new TypeToken<List<Menu>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Azon men�k lek�rdez�se, amelyek a param�terk�nt �tadott napon (a h�t napjai k�z�l) el�rhet?ek. pl. MONDAY (asynchronously)
     * 
     * @param dayOfWeek A h�t egy napja angolul (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMenusByDayOfWeekAsync(String dayOfWeek, final ApiCallback<List<Menu>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMenusByDayOfWeekValidateBeforeCall(dayOfWeek, _callback);
        Type localVarReturnType = new TypeToken<List<Menu>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMenusByGroupId
     * @param groupId Csoportazonos�t� (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMenusByGroupIdCall(Long groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/menu/getMenusByGroupId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupId", groupId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMenusByGroupIdValidateBeforeCall(Long groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getMenusByGroupId(Async)");
        }

        return getMenusByGroupIdCall(groupId, _callback);

    }

    /**
     * Azon men�k lek�rdez�se, amelyek a param�terk�nt �tadott csoportazonos�t�val rendelkeznek. (pl. 300, 303 stb)
     * 
     * @param groupId Csoportazonos�t� (required)
     * @return List&lt;Menu&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public List<Menu> getMenusByGroupId(Long groupId) throws ApiException {
        ApiResponse<List<Menu>> localVarResp = getMenusByGroupIdWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * Azon men�k lek�rdez�se, amelyek a param�terk�nt �tadott csoportazonos�t�val rendelkeznek. (pl. 300, 303 stb)
     * 
     * @param groupId Csoportazonos�t� (required)
     * @return ApiResponse&lt;List&lt;Menu&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Menu>> getMenusByGroupIdWithHttpInfo(Long groupId) throws ApiException {
        okhttp3.Call localVarCall = getMenusByGroupIdValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<List<Menu>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Azon men�k lek�rdez�se, amelyek a param�terk�nt �tadott csoportazonos�t�val rendelkeznek. (pl. 300, 303 stb) (asynchronously)
     * 
     * @param groupId Csoportazonos�t� (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMenusByGroupIdAsync(Long groupId, final ApiCallback<List<Menu>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMenusByGroupIdValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<List<Menu>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMostFrequentlyOrderedMenuItem
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMostFrequentlyOrderedMenuItemCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/menu/getMostFrequentlyOrderedMenuItem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMostFrequentlyOrderedMenuItemValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getMostFrequentlyOrderedMenuItemCall(_callback);

    }

    /**
     * Legt�bbsz�r rendelt �tel lek�rdez�se.
     * 
     * @return Menu
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public Menu getMostFrequentlyOrderedMenuItem() throws ApiException {
        ApiResponse<Menu> localVarResp = getMostFrequentlyOrderedMenuItemWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Legt�bbsz�r rendelt �tel lek�rdez�se.
     * 
     * @return ApiResponse&lt;Menu&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Menu> getMostFrequentlyOrderedMenuItemWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getMostFrequentlyOrderedMenuItemValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Menu>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Legt�bbsz�r rendelt �tel lek�rdez�se. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMostFrequentlyOrderedMenuItemAsync(final ApiCallback<Menu> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMostFrequentlyOrderedMenuItemValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Menu>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecipesWithEnoughResources
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecipesWithEnoughResourcesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/menu/getRecipesWithEnoughResources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecipesWithEnoughResourcesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getRecipesWithEnoughResourcesCall(_callback);

    }

    /**
     * Azon receptek lek�rdez�se, amelyekhez VAN elegend? alapanyag rakt�ron.
     * 
     * @return List&lt;Recipe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public List<Recipe> getRecipesWithEnoughResources() throws ApiException {
        ApiResponse<List<Recipe>> localVarResp = getRecipesWithEnoughResourcesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Azon receptek lek�rdez�se, amelyekhez VAN elegend? alapanyag rakt�ron.
     * 
     * @return ApiResponse&lt;List&lt;Recipe&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Recipe>> getRecipesWithEnoughResourcesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getRecipesWithEnoughResourcesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Recipe>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Azon receptek lek�rdez�se, amelyekhez VAN elegend? alapanyag rakt�ron. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecipesWithEnoughResourcesAsync(final ApiCallback<List<Recipe>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecipesWithEnoughResourcesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Recipe>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecipesWithNotEnoughResources
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecipesWithNotEnoughResourcesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/menu/getRecipesWithNotEnoughResources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecipesWithNotEnoughResourcesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getRecipesWithNotEnoughResourcesCall(_callback);

    }

    /**
     * Azon receptek lek�rdez�se, amelyekhez NINCS elegend? alapanyag rakt�ron.
     * 
     * @return List&lt;Recipe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public List<Recipe> getRecipesWithNotEnoughResources() throws ApiException {
        ApiResponse<List<Recipe>> localVarResp = getRecipesWithNotEnoughResourcesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Azon receptek lek�rdez�se, amelyekhez NINCS elegend? alapanyag rakt�ron.
     * 
     * @return ApiResponse&lt;List&lt;Recipe&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Recipe>> getRecipesWithNotEnoughResourcesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getRecipesWithNotEnoughResourcesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Recipe>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Azon receptek lek�rdez�se, amelyekhez NINCS elegend? alapanyag rakt�ron. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sikeres lek�rdez�s </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecipesWithNotEnoughResourcesAsync(final ApiCallback<List<Recipe>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecipesWithNotEnoughResourcesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Recipe>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
